// This file is NOT generated by Diesel CLI, but is written manually.
// This is done because we don't have any control over the schema of the database and only
// reverse-engineered the schema from the database file.

diesel::table! {

    #[sql_name = "Z_METADATA"]
    metadata (version) {
        
        #[sql_name = "Z_VERSION"]
        version -> Integer,

        #[sql_name = "Z_PLIST"]
        plist -> Binary
    }
}

diesel::table! {

    /// This table contains information about albums in the Photos database.
    ///
    /// - `Photos.db` name: `ZGENERICALBUM`
    #[sql_name = "ZGENERICALBUM"]
    albums (id) {

        /// The primary key of the album.
        ///
        /// - `Photos.db` name: `Z_PK`
        /// - Type: `INTEGER`
        #[sql_name = "Z_PK"]
        id -> Integer,

        /// Type of the album.
        ///
        /// - `Photos.db` name: `ZKIND`
        /// - Type: `INTEGER`
        ///
        /// Known possible values:
        /// - `3999`: Root album (not visible to the user)
        /// - `4000`: Folder that may contain other albums
        /// - `2`: Regular album
        /// - `1505`: iCloud album
        #[sql_name = "ZKIND"]
        kind -> Integer,

        /// ID (`Z_PK`) of the parent folder of the album.
        ///
        /// - `Photos.db` name: `ZPARENTFOLDER`
        /// - Type: `INTEGER (nullable)`
        #[sql_name = "ZPARENTFOLDER"]
        parent_id -> Nullable<Integer>,

        /// Name of the album.
        ///
        /// - `Photos.db` name: `ZTITLE`
        /// - Type: `VARCHAR (nullable)`
        #[sql_name = "ZTITLE"]
        name -> Nullable<VarChar>,

        /// Date when the album was created.
        ///
        /// The stored date uses the Apple/Cocoa format, meaning it is the number of seconds since
        /// 2001-01-01 00:00:00 UTC.
        ///
        /// - `Photos.db` name: `ZSTARTDATE`
        /// - Type: `FLOAT (nullable)`
        #[sql_name = "ZSTARTDATE"]
        start_date -> Nullable<Float>,

        /// Indicates whether the album has been trashed.
        ///
        /// - `Photos.db` name: `ZTRASHEDSTATE`
        /// - Type: `BOOL`
        #[sql_name = "ZTRASHEDSTATE"]
        trashed -> Bool,
    }
}

diesel::table! {

    /// This table contains general information about assets in the Photos database.
    ///
    /// - `Photos.db` name: `ZASSET`
    #[sql_name = "ZASSET"]
    assets (id) {

        /// The primary key of the asset.
        ///
        /// - `Photos.db` name: `Z_PK`
        /// - Type: `INTEGER`
        #[sql_name = "Z_PK"]
        id -> Integer,

        /// Unique identifier of the asset.
        ///
        /// - `Photos.db` name: `ZUUID`
        /// - Type: `VARCHAR`
        #[sql_name = "ZUUID"]
        uuid -> VarChar,

        /// Directory where the asset is stored.
        ///
        /// This is a relative path. The base path from the Photos library depends on whether the
        /// aset has been edited or not and other factors and is not stored in the database.
        ///
        /// - `Photos.db` name: `ZDIRECTORY`
        /// - Type: `VARCHAR`
        #[sql_name = "ZDIRECTORY"]
        dir -> VarChar,

        /// Internal filename of the asset.
        ///
        /// - `Photos.db` name: `ZFILENAME`
        /// - Type: `VARCHAR`
        #[sql_name = "ZFILENAME"]
        filename -> VarChar,

        /// Current type identifier of the asset.
        ///
        /// This type always represents the current type of the asset. If the asset has been edited
        /// and the type has changed, this field will contain the type of the edited asset.
        ///
        /// If edited, the original file type can either be determined via
        /// `ZINTERNALRESOURCE.ZCOMPACTUTI` (iCloud enabled libraries only) or by the file extension
        /// (fallback).
        ///
        /// - `Photos.db` name: `ZUNIFORMTYPEIDENTIFIER`
        /// - Type: `VARCHAR`
        #[sql_name = "ZUNIFORMTYPEIDENTIFIER"]
        uniform_type_identifier -> VarChar,

        /// Date when the asset was created.
        ///
        /// The stored date uses the Apple/Cocoa format, meaning it is the number of seconds since
        /// 2001-01-01 00:00:00 UTC.
        ///
        /// - `Photos.db` name: `ZDATECREATED`
        /// - Type: `FLOAT`
        #[sql_name = "ZDATECREATED"]
        date -> Float,

        /// Indicates whether the asset is in the 'hidden' album.
        ///
        /// - `Photos.db` name: `ZHIDDEN`
        /// - Type: `BOOL`
        #[sql_name = "ZHIDDEN"]
        hidden -> Bool,

        /// Indicates whether the asset is marked as a favorite.
        ///
        /// - `Photos.db` name: `ZFAVORITE`
        /// - Type: `BOOL`
        #[sql_name = "ZFAVORITE"]
        favorite -> Bool,

        /// Indicates whether the asset has been trashed.
        ///
        /// - `Photos.db` name: `ZTRASHEDSTATE`
        /// - Type: `BOOL`
        #[sql_name = "ZTRASHEDSTATE"]
        trashed -> Bool,

        /// Visibility state of the asset.
        ///
        /// This field is widely unknown and not well documented. It seems to be related to the
        /// visibility of the asset in the Photos app.
        ///
        /// - `Photos.db` name: `ZVISIBILITYSTATE`
        /// - Type: `INTEGER`
        #[sql_name = "ZVISIBILITYSTATE"]
        visibility_state -> Integer,

        /// Visibility state of the asset.
        ///
        /// This field is widely unknown and not well documented. It seems to be related to the
        /// visibility of duplicate assets in the Photos app.
        ///
        /// - `Photos.db` name: `ZDUPLICATEASSETVISIBILITYSTATE`
        /// - Type: `INTEGER`
        #[sql_name = "ZDUPLICATEASSETVISIBILITYSTATE"]
        duplicate_asset_visibility_state -> Integer,

        /// Indicates whether the asset has adjustments (i.e. has been edited).
        ///
        /// - `Photos.db` name: `ZADJUSTMENTSSTATE`
        /// - Type: `Integer`
        ///
        /// Known possible values:
        //  - `0`: No adjustments
        //  - Values `> 0`: Has adjustments
        #[sql_name = "ZADJUSTMENTSSTATE"]
        adjustments_state -> Integer,
    }
}

diesel::table! {

    /// This table contains additional attributes of assets in the Photos database.
    ///
    /// - `Photos.db` name: `ZADDITIONALASSETATTRIBUTES`
    #[sql_name = "ZADDITIONALASSETATTRIBUTES"]
    asset_attributes (id) {

        /// The primary key of the asset attribute.
        ///
        /// - `Photos.db` name: `Z_PK`
        /// - Type: `INTEGER`
        #[sql_name = "Z_PK"]
        id -> Integer,

        /// ID of the asset the attribute belongs to.
        ///
        /// - `Photos.db` name: `ZASSET`
        /// - Type: `INTEGER`
        #[sql_name = "ZASSET"]
        asset_id -> Integer,

        /// Original filename of the asset upon import.
        ///
        /// This may be used to determine the original file type of the asset upon export.
        ///
        /// - `Photos.db` name: `ZORIGINALFILENAME`
        /// - Type: `VARCHAR`
        #[sql_name = "ZORIGINALFILENAME"]
        original_filename -> VarChar,

        /// Master fingerprint of the asset.
        ///
        /// This is used to link the asset to the internal resources table.
        ///
        /// - `Photos.db` name: `ZMASTERFINGERPRINT`
        /// - Type: `VARCHAR`
        #[sql_name = "ZMASTERFINGERPRINT"]
        master_fingerprint -> VarChar,
    }
}

diesel::table! {

    /// This table contains intternal attributes of assets in the Photos database.
    ///
    /// It is unclear what specific information is stored in this table. Also, it seems not to be
    /// available in offline libraries.
    ///
    /// - `Photos.db` name: `ZINTERNALRESOURCE`
    #[sql_name = "ZINTERNALRESOURCE"]
    internal_resources (id) {

        /// The primary key of the internal resource.
        ///
        /// - `Photos.db` name: `Z_PK`
        /// - Type: `INTEGER`
        #[sql_name = "Z_PK"]
        id -> Integer,

        /// Asset the internal resource is associated with.
        ///
        /// - `Photos.db` name: `ZASSET`
        /// - Type: `INTEGER`
        #[sql_name = "ZASSET"]
        asset_id -> Integer,

        /// Fingerpring of the asset.
        ///
        /// This is used to link the asset to the additional asset attributes table.
        ///
        /// - `Photos.db` name: `ZFINGERPRINT`
        /// - Type: `VARCHAR`
        #[sql_name = "ZFINGERPRINT"]
        fingerprint -> VarChar,

        /// Data-store subtype id of the asset.
        ///
        /// The id of this column seems to be related to the type of asset.
        ///
        /// - `Photos.db` name: `ZDATASTORESUBTYPE`
        /// - Type: `INTEGER`
        ///
        /// Known possible values:
        /// - `1`: Original asset
        #[sql_name = "ZDATASTORESUBTYPE"]
        data_store_subtype -> Integer,

        /// Indicates whether the asset is available locally.
        ///
        /// This field is widely unknown and not well documented. It seems to be related to the
        /// availability of the asset in the Photos app.
        ///
        /// A value of `1` seems to indicate that the asset is available locally.
        ///
        /// - `Photos.db` name: `ZLOCALAVAILABILITY`
        /// - Type: `INTEGER`
        #[sql_name = "ZLOCALAVAILABILITY"]
        local_availability -> Integer,

        /// Original UTI of the asset.
        ///
        /// This field is only available in iCloud enabled libraries. It is used to determine the
        /// original file type of the asset, ignoring whether the asset has been edited or not.
        /// It is not available in offline libraries. In this case, the original file type can be
        /// determined by the file extension.
        ///
        /// - `Photos.db` name: `ZCOMPACTUTI`
        /// - Type: `INTEGER`
        #[sql_name = "ZCOMPACTUTI"]
        compact_uti -> Integer,
    }
}

diesel::table! {

    /// This table is used to link assets to albums in the Photos database.
    ///
    /// - `Photos.db` name: `Z_30ASSETS`
    /// - Type: `INTEGER`
    #[sql_name = "Z_30ASSETS"]
    album_assets (asset_id, album_id) {

        /// ID of the asset.
        ///
        /// - `Photos.db` name: `Z_3ASSETS`
        /// - Type: `INTEGER`
        #[sql_name = "Z_3ASSETS"]
        asset_id -> Integer,

        /// ID of the album the asset is linked to.
        ///
        /// - `Photos.db` name: `Z_28ALBUMS`
        /// - Type: `INTEGER`
        #[sql_name = "Z_30ALBUMS"]
        album_id -> Integer,
    }
}

diesel::joinable!(asset_attributes -> assets (asset_id));
diesel::joinable!(album_assets -> assets (asset_id));
diesel::joinable!(album_assets -> albums (album_id));

diesel::allow_tables_to_appear_in_same_query!(
    albums,
    assets,
    asset_attributes,
    internal_resources,
    album_assets
);
